diff -rupN linux-2.6.18-128.1.6_1/fs/ext3/namei.c linux-2.6.18-128.1.6_2/fs/ext3/namei.c
--- linux-2.6.18-128.1.6_1/fs/ext3/namei.c	2009-08-13 19:07:07.000000000 +0530
+++ linux-2.6.18-128.1.6_2/fs/ext3/namei.c	2009-08-13 19:10:43.000000000 +0530
@@ -24,6 +24,7 @@
  * 	Theodore Ts'o, 2002
  */
 
+#include <linux/module.h>
 #include <linux/fs.h>
 #include <linux/pagemap.h>
 #include <linux/jbd.h>
@@ -841,7 +842,7 @@ static inline int search_dirblock(struct
  * The returned buffer_head has ->b_count elevated.  The caller is expected
  * to brelse() it when appropriate.
  */
-static struct buffer_head * ext3_find_entry (struct dentry *dentry,
+struct buffer_head * ext3_find_entry (struct dentry *dentry,
 					struct ext3_dir_entry_2 ** res_dir)
 {
 	struct super_block * sb;
@@ -953,6 +954,7 @@ cleanup_and_exit:
 		brelse (bh_use[ra_ptr]);
 	return ret;
 }
+EXPORT_SYMBOL(ext3_find_entry);
 
 #ifdef CONFIG_EXT3_INDEX
 static struct buffer_head * ext3_dx_find_entry(struct dentry *dentry,
@@ -1489,7 +1491,7 @@ static int make_indexed_dir(handle_t *ha
  * may not sleep between calling this and putting something into
  * the entry, as someone else might have used it while you slept.
  */
-static int ext3_add_entry (handle_t *handle, struct dentry *dentry,
+int ext3_add_entry (handle_t *handle, struct dentry *dentry,
 	struct inode *inode)
 {
 	struct inode *dir = dentry->d_parent->d_inode;
@@ -1542,6 +1544,7 @@ static int ext3_add_entry (handle_t *han
 	de->rec_len = cpu_to_le16(blocksize);
 	return add_dirent_to_buf(handle, dentry, inode, de, bh);
 }
+EXPORT_SYMBOL(ext3_add_entry);
 
 #ifdef CONFIG_EXT3_INDEX
 /*
@@ -1684,10 +1687,10 @@ cleanup:
  * ext3_delete_entry deletes a directory entry by merging it with the
  * previous entry
  */
-static int ext3_delete_entry (handle_t *handle, 
-			      struct inode * dir,
-			      struct ext3_dir_entry_2 * de_del,
-			      struct buffer_head * bh)
+int ext3_delete_entry (handle_t *handle,
+			struct inode * dir,
+			struct ext3_dir_entry_2 * de_del,
+			struct buffer_head * bh)
 {
 	struct ext3_dir_entry_2 * de, * pde;
 	int i;
@@ -1719,6 +1722,7 @@ static int ext3_delete_entry (handle_t *
 	}
 	return -ENOENT;
 }
+EXPORT_SYMBOL(ext3_delete_entry);
 
 /*
  * ext3_mark_inode_dirty is somewhat expensive, so unlike ext2 we
@@ -1774,6 +1778,26 @@ static struct inode * ext3_new_inode_wan
 	return ext3_new_inode(handle, dir, mode, inum);
 }
 
+struct inode * ext3_create_inode(handle_t *handle, struct inode * dir, int mode)
+{
+	struct inode *inode;
+
+	inode = ext3_new_inode(handle, dir, mode, 0);
+	if (!IS_ERR(inode)) {
+		if (S_ISCHR(mode) || S_ISBLK(mode) || S_ISFIFO(mode)) {
+#ifdef CONFIG_LDISKFS_FS_XATTR
+			inode->i_op = &ext3_special_inode_operations;
+#endif
+		} else {
+			inode->i_op = &ext3_file_inode_operations;
+			inode->i_fop = &ext3_file_operations;
+			ext3_set_aops(inode);
+		}
+	}
+	return inode;
+}
+EXPORT_SYMBOL(ext3_create_inode);
+
 /*
  * By the time this is called, we already have created
  * the directory cache entry for the new file, but it
@@ -1848,42 +1872,28 @@ retry:
 	return err;
 }
 
-static int ext3_mkdir(struct inode * dir, struct dentry * dentry, int mode)
+/* Initialize @inode as a subdirectory of @dir, and add the
+ * "." and ".." entries into the first directory block. */
+int ext3_add_dot_dotdot(handle_t *handle, struct inode * dir,
+			 struct inode *inode)
 {
-	handle_t *handle;
-	struct inode * inode;
 	struct buffer_head * dir_block;
 	struct ext3_dir_entry_2 * de;
-	int err, retries = 0;
-
-	if (EXT3_DIR_LINK_MAX(dir))
-		return -EMLINK;
+	int err = 0;
 
-retry:
-	handle = ext3_journal_start(dir, EXT3_DATA_TRANS_BLOCKS(dir->i_sb) +
-					EXT3_INDEX_EXTRA_TRANS_BLOCKS + 3 +
-					2*EXT3_QUOTA_INIT_BLOCKS(dir->i_sb));
 	if (IS_ERR(handle))
 		return PTR_ERR(handle);
 
 	if (IS_DIRSYNC(dir))
 		handle->h_sync = 1;
 
-	inode = ext3_new_inode_wantedi (handle, dir, S_IFDIR | mode, dentry);
-	err = PTR_ERR(inode);
-	if (IS_ERR(inode))
-		goto out_stop;
-
 	inode->i_op = &ext3_dir_inode_operations;
 	inode->i_fop = &ext3_dir_operations;
 	inode->i_size = EXT3_I(inode)->i_disksize = inode->i_sb->s_blocksize;
 	dir_block = ext3_bread (handle, inode, 0, 1, &err);
-	if (!dir_block) {
-		drop_nlink(inode); /* is this nlink == 0? */
-		ext3_mark_inode_dirty(handle, inode);
-		iput (inode);
-		goto out_stop;
-	}
+	if (!dir_block)
+		goto get_out;
+
 	BUFFER_TRACE(dir_block, "get_write_access");
 	ext3_journal_get_write_access(handle, dir_block);
 	de = (struct ext3_dir_entry_2 *) dir_block->b_data;
@@ -1904,6 +1914,45 @@ retry:
 	ext3_journal_dirty_metadata(handle, dir_block);
 	brelse (dir_block);
 	ext3_mark_inode_dirty(handle, inode);
+
+get_out:
+	return err;
+
+}
+EXPORT_SYMBOL(ext3_add_dot_dotdot);
+
+static int ext3_mkdir(struct inode * dir, struct dentry * dentry, int mode)
+{
+	handle_t *handle;
+	struct inode * inode;
+	int err, retries = 0;
+
+	if (EXT3_DIR_LINK_MAX(dir))
+		return -EMLINK;
+
+retry:
+	handle = ext3_journal_start(dir, EXT3_DATA_TRANS_BLOCKS(dir->i_sb) +
+					EXT3_INDEX_EXTRA_TRANS_BLOCKS + 3 +
+					2*EXT3_QUOTA_INIT_BLOCKS(dir->i_sb));
+	if (IS_ERR(handle))
+		return PTR_ERR(handle);
+
+	if (IS_DIRSYNC(dir))
+		handle->h_sync = 1;
+
+	inode = ext3_new_inode_wantedi (handle, dir, S_IFDIR | mode, dentry);
+	err = PTR_ERR(inode);
+	if (IS_ERR(inode))
+		goto out_stop;
+
+	err = ext3_add_dot_dotdot(handle, dir, inode);
+	if (err) {
+		inode->i_nlink = 0;
+		ext3_mark_inode_dirty(handle, inode);
+		iput (inode);
+		goto out_stop;
+	}
+
 	err = ext3_add_entry (handle, dentry, inode);
 	if (err) {
 		inode->i_nlink = 0;
diff -rupN linux-2.6.18-128.1.6_1/include/linux/ext3_fs.h linux-2.6.18-128.1.6_2/include/linux/ext3_fs.h
--- linux-2.6.18-128.1.6_1/include/linux/ext3_fs.h	2009-08-13 19:07:07.000000000 +0530
+++ linux-2.6.18-128.1.6_2/include/linux/ext3_fs.h	2009-08-13 19:14:07.000000000 +0530
@@ -1076,6 +1076,10 @@ extern int ext3_group_extend(struct supe
 				ext3_fsblk_t n_blocks_count);
 
 /* super.c */
+extern int ext3_xattr_set_handle(handle_t *handle, struct inode *inode,
+				 int name_index, const char *name,
+				 const void *value, size_t value_len,
+				 int flags);
 extern struct proc_dir_entry *proc_root_ext3;
 extern int __init init_ext3_proc(void);
 extern void exit_ext3_proc(void);
@@ -1107,6 +1111,20 @@ extern struct inode_operations ext3_file
 extern const struct file_operations ext3_file_operations;
 
 /* namei.c */
+extern struct inode *ext3_create_inode(handle_t *handle,
+				       struct inode * dir, int mode);
+extern int ext3_add_entry(handle_t *handle, struct dentry *dentry,
+			  struct inode *inode);
+extern int ext3_delete_entry(handle_t *handle,
+			     struct inode * dir,
+			     struct ext3_dir_entry_2 * de_del,
+			     struct buffer_head * bh);
+extern struct buffer_head * ext3_find_entry(struct dentry *dentry,
+					    struct ext3_dir_entry_2
+					    ** res_dir);
+#define ll_ext3_find_entry(inode, dentry, res_dir) ext3_find_entry(dentry, res_dir)
+extern int ext3_add_dot_dotdot(handle_t *handle, struct inode *dir,
+			       struct inode *inode);
 extern struct inode_operations ext3_dir_inode_operations;
 extern struct inode_operations ext3_special_inode_operations;
 

